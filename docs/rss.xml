<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>kaikai的博客</title><link>https://naphjohn.github.io</link><description>记录深度学习，大模型中技术感悟</description><copyright>kaikai的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/46772304?v=4</url><title>avatar</title><link>https://naphjohn.github.io</link></image><lastBuildDate>Mon, 29 Sep 2025 11:23:06 +0000</lastBuildDate><managingEditor>kaikai的博客</managingEditor><ttl>60</ttl><webMaster>kaikai的博客</webMaster><item><title>cude</title><link>https://naphjohn.github.io/post/cude.html</link><description>1. 算子命名
2. rag内容read。</description><guid isPermaLink="true">https://naphjohn.github.io/post/cude.html</guid><pubDate>Mon, 29 Sep 2025 11:22:34 +0000</pubDate></item><item><title>大模型的前世今生</title><link>https://naphjohn.github.io/post/da-mo-xing-de-qian-shi-jin-sheng.html</link><description># Encoder-only模型

bert模型：
BERT（Bidirectional Encoder Representations from Transformers）= “只有 Transformer 编码器” 的预训练语言模型。</description><guid isPermaLink="true">https://naphjohn.github.io/post/da-mo-xing-de-qian-shi-jin-sheng.html</guid><pubDate>Mon, 22 Sep 2025 07:11:37 +0000</pubDate></item><item><title>C++进阶</title><link>https://naphjohn.github.io/post/C%2B%2B-jin-jie.html</link><description>here。</description><guid isPermaLink="true">https://naphjohn.github.io/post/C%2B%2B-jin-jie.html</guid><pubDate>Mon, 22 Sep 2025 03:38:55 +0000</pubDate></item><item><title>多模态模型</title><link>https://naphjohn.github.io/post/duo-mo-tai-mo-xing.html</link><description># ViT模型
ViT = Patch Embedding + Transformer Encoder + cls_token（图像分类），就是「把图切成 patches → 当成一串 token → 做自注意力」，全局上下文一步到位，无需 CNN。</description><guid isPermaLink="true">https://naphjohn.github.io/post/duo-mo-tai-mo-xing.html</guid><pubDate>Sat, 20 Sep 2025 08:01:00 +0000</pubDate></item><item><title>简历对应问题</title><link>https://naphjohn.github.io/post/jian-li-dui-ying-wen-ti.html</link><description>## 昇腾 NPU 深度优化


## 大模型推理通用方法论
#### • 客户要求 99.9% 的请求 P99 延迟 &lt; 200 ms，但模型参数量翻倍，你会先做哪三项优化？
客户要求 99.9% 的请求 P99 延迟 &lt; 200 ms，但模型参数量翻倍，你会先做哪三项优化？
A：

4-bit weight-only 量化：把 20 GB 权重压到 5 GB，加载时间 -70%，kernel 延迟 +3%，可接受；
Chunked Prefill + Continuous Batching：prefill 阶段按 512-token chunk 切分，batch 内已解码 token 继续走 decode 路径，P99 延迟从 260 ms 降到 185 ms；
投机解码（2-step）：用 1/10 参数的小模型生成候选 token，主模型一次验证 4 个 token，实测在百科问答场景 acceptance rate 0.72，整体延迟再降 22%。</description><guid isPermaLink="true">https://naphjohn.github.io/post/jian-li-dui-ying-wen-ti.html</guid><pubDate>Mon, 15 Sep 2025 15:49:42 +0000</pubDate></item><item><title>SGlang推理引擎</title><link>https://naphjohn.github.io/post/SGlang-tui-li-yin-qing.html</link><description>## SGlang框架
1. **前端语言**：
   - 提供原生成API接口，可以直接与本地模型交互和调用。</description><guid isPermaLink="true">https://naphjohn.github.io/post/SGlang-tui-li-yin-qing.html</guid><pubDate>Tue, 09 Sep 2025 12:10:55 +0000</pubDate></item><item><title>算子测精度差异</title><link>https://naphjohn.github.io/post/suan-zi-ce-jing-du-cha-yi.html</link><description># 算子介绍
### reducescatter算子
ReduceScatter 是一个在大规模并行计算（尤其是深度学习训练）中非常重要的集合通信（Collective Communication）算子。</description><guid isPermaLink="true">https://naphjohn.github.io/post/suan-zi-ce-jing-du-cha-yi.html</guid><pubDate>Tue, 09 Sep 2025 07:05:38 +0000</pubDate></item><item><title>深度学习基础</title><link>https://naphjohn.github.io/post/shen-du-xue-xi-ji-chu.html</link><description># CNN

**关键组件：**
  - 卷积层： 提取局部特征，使用滤波器（Filter）滑动计算。</description><guid isPermaLink="true">https://naphjohn.github.io/post/shen-du-xue-xi-ji-chu.html</guid><pubDate>Tue, 09 Sep 2025 03:24:30 +0000</pubDate></item><item><title>生成模型</title><link>https://naphjohn.github.io/post/sheng-cheng-mo-xing.html</link><description>## Diffusion Models 扩散模型
核心思想是逐步的数据生成过程。</description><guid isPermaLink="true">https://naphjohn.github.io/post/sheng-cheng-mo-xing.html</guid><pubDate>Tue, 09 Sep 2025 01:39:45 +0000</pubDate></item><item><title>linux</title><link>https://naphjohn.github.io/post/linux.html</link><description>### gpu上建立容器
```powershell
nvidia-docker run -it \   （这边也可以使用docker run -it）
docker run -it -u root \
--gpus all  \
-p 1034:1034 -p 2735:2735 \
-e NVIDIA_VISIBLE_DEVICES=0,1,2,3,4,5,6,7 \
--ulimit memlock=-1 \
--name whk_vllm_091_0728 \
-v /data/:/data/ \
-v /home/model/:/home/model/ \
ee0767a44255 bash

#挂载命令
mkdir -p /nfs-data ; mount -t nfs -o vers=3,timeo=600,nolock 10.170.23.193:/ /nfs-data
``` 

### 初始化设置
```python
vim ~/.bashrc

export HISTSIZE=1000
export ASCEND_RT_VISIBLE_DEVICES=0,1,2,3,4,5,6,7
export https_proxy=http://10.155.192.138:8080
``` 

### 修改pip源
```powershell
vim ~/.pip/pip.conf
[global]
index-url = http://7.223.199.227/pypi/simple
trusted-host = 7.223.199.227
timeout = 120

#pip install torch==2.5.1  --default-timeout=1000 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host=mirrors.aliyun.com
``` 

### 多机启动
```powershell
ray：# 指定通信网卡，使用ifconfig查看，找到和主机IP一致的网卡名
export GLOO_SOCKET_IFNAME=enp67s0f5
export TP_SOCKET_IFNAME=enp67s0f5
export RAY_EXPERIMENTAL_NOSET_ASCEND_RT_VISIBLE_DEVICES=1
export ASCEND_RT_VISIBLE_DEVICES=0,1,2,3,4,5,6,7

export MM_ALL_REDUCE_OP_THRESHOLD=1000000
export HCCL_OP_EXPANSION_MODE='AIV'
export NUMEXPR_MAX_THREADS=192

# 将其中一个节点设为头节点
ray start --head --num-gpus=8
# 在其他节点执行
ray start --address='7.216.55.58:6379' --num-gpus=8
``` 


### 远程链接容器
```powershell
#配置ssh
#第一步config文件
vi /etc/ssh/sshd_config
PermitRootLogin yes
PasswordAuthentication yes
#第二步建立/run/sshd
mkdir /run/sshd

#第三步确认没有sshd时候设置passwd
passwd #这个时候别有sshd
#第四步开启sshd
/usr/sbin/sshd
ssh 7.242.105.173 -p 8035 #来确认是否链接成功

#解决上面报错，生成对应ssh
ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -P '' -q
ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -P '' -q
ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -P '' -q

#不需要ssh命令
git config --global http.sslVerify false

#支持自动迁移代码
 from torch_npu.contrib import transfer_to_npu
``` 

### 打patch包
```powershell
cp -r vllm patch/vllm
cd patch
git init
git add .
git commit  -m 'init'
修改代码
git add .
git commit -m 'xxxx'
git format-patch -1
修改patch名称
``` 

### 查看cann包
```powershell
#查看cann包版本
cat /usr/local/Ascend/ascend-toolkit/latest/version.cfg
#去除所有进程
ps -ef | grep python| grep -v grep | awk '{print $2}' | xargs kill -9
#pytorch中查看日志的两行命令
export ASCEND_GLOBAL_LOG_LEVEL=1
export ASCEND_SLOG_PRINT_TO_STDOUT=1
``` 

### 可视化数据
```powershell
# 使用 pip3 (推荐)
pip3 install visidata

# Ubuntu/Debian
sudo apt-get install visidata

# macOS (使用Homebrew)
brew install visidata


vd + csv文件
``` 。</description><guid isPermaLink="true">https://naphjohn.github.io/post/linux.html</guid><pubDate>Mon, 08 Sep 2025 07:22:10 +0000</pubDate></item><item><title>RAG和Agent</title><link>https://naphjohn.github.io/post/RAG-he-Agent.html</link><description># RAG 检索增强生成（Retrieval-Augmented Generation，RAG）
RAG的基本结构有哪些呢？
- 向量化模块：用来将文档片段向量化。</description><guid isPermaLink="true">https://naphjohn.github.io/post/RAG-he-Agent.html</guid><pubDate>Mon, 08 Sep 2025 02:54:13 +0000</pubDate></item><item><title>Code</title><link>https://naphjohn.github.io/post/Code.html</link><description>## 数组
数组是存放在连续内存空间上的相同类型数据的集合。</description><guid isPermaLink="true">https://naphjohn.github.io/post/Code.html</guid><pubDate>Sat, 06 Sep 2025 13:59:33 +0000</pubDate></item><item><title>大模型推理基础</title><link>https://naphjohn.github.io/post/da-mo-xing-tui-li-ji-chu.html</link><description># LLM的推理/transformer架构/vllm

## LLM 推理的推理过程
目前主流LLM都是基于transformer的Decoder-only架构，因为 Decoder-only 架构**在“大规模无监督预训练”这个特定范式下，展现出了更好的可扩展性（Scalability）和任务通用性。</description><guid isPermaLink="true">https://naphjohn.github.io/post/da-mo-xing-tui-li-ji-chu.html</guid><pubDate>Sat, 06 Sep 2025 13:42:06 +0000</pubDate></item><item><title>大模型推理优化</title><link>https://naphjohn.github.io/post/da-mo-xing-tui-li-you-hua.html</link><description># 大模型优化方式/优化特性
优化主要是从框架测（量化，其它特性），压缩内存，然后算子角度，来提升吞吐。</description><guid isPermaLink="true">https://naphjohn.github.io/post/da-mo-xing-tui-li-you-hua.html</guid><pubDate>Sat, 06 Sep 2025 13:36:25 +0000</pubDate></item><item><title>大模型训练</title><link>https://naphjohn.github.io/post/da-mo-xing-xun-lian.html</link><description># 训练主要流程
┌──────────────┐
│  1. 数据工程   │──→ 3T-30T raw tokens → 质量分层（PageRank+fastText+LLM-Score）
│  清洗+去重+配比 │──→ 对话:代码:多模态=6:3:1，token 级采样
└──────┬─────────┘
       ↓
┌──────────────┐
│  2. 预训练     │──→ FP8 混合精度 + 3D-Parallel(TP-PP-DP) + ZeRO-3
│  通用底座      │──→ 14.8T-30T tokens，2-4 个月，H100×2k-8k
│  目标：下个 token 预测 │──→ 保存 final ckpt + 中间 5-10 个 milestone
└──────┬─────────┘
       ↓
┌──────────────┐
│  3. 长上下文扩展 │──→ 继续预训练 10B-100B tokens，RoPE 基频 500k→2M
│  256k-2M ctx   │──→ MLA/Ring-Attention + 序列并行，1-2 epoch
└──────┬─────────┘
       ↓
┌──────────────┐
│  4. 监督微调   │──→ 100k-2M 高质量指令样本（CoT+对话+工具）
│  SFT           │──→ 2-5 epoch，LR 1e-5-5e-6，BF16/FP8，3-7 天
└──────┬─────────┘
       ↓
┌──────────────┐
│  5. 规则/偏好 RL │──→ GRPO or PPO，无人工答案，仅规则/ORM 奖励
│  （CoT 自我进化） │──→ 1-3 轮，每轮 10k-100k 在线轨迹，10-30 天
└──────┬─────────┘
       ↓
┌──────────────┐
│  6. 拒绝采样蒸馏 │──→ 用 5.b 策略产 1M 正确轨迹 → 短 SFT → 更小模型
│  RFT + DPO     │──→ 同时做 DPO/RLHF 对齐人类可读 &amp; 安全
└──────┬─────────┘
       ↓
┌──────────────┐
│  7. 评估 &amp; 量化上线 │──→ Open-LLM-Leaderboard + 业务私评
│  量化+推理优化   │──→ GPTQ/AWQ/FP8 W8A8 + TensorRT-LLM/vLLM
│  灰度→全量      │──→ 监控幻觉、延迟、成本，回滚 gate
└──────────────┘
“先 3D-并行 FP8 预训练 20 T token 拿底座，再长上下文扩展 → 百万级 SFT → 规则 RL（GRPO/PPO）让模型自己写 CoT → 拒绝采样蒸馏出小模型 → DPO 对齐人类偏好 → 量化上线，全程 3-4 个月，H100×2k 卡。</description><guid isPermaLink="true">https://naphjohn.github.io/post/da-mo-xing-xun-lian.html</guid><pubDate>Sat, 06 Sep 2025 13:21:04 +0000</pubDate></item></channel></rss>